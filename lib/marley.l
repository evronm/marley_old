
(load "lib/util.l")
(load "lib/server.l")
(load "config.l")

(de conf (Lst)
  (if (= 1 (length Lst))
    (assoc (car Lst) *CONFIG)
    (assoc (car Lst) (conf (cdr Lst)))))

(de confv (Lst)
  (cdr (conf Lst)))


(de authn (Un Pw)
  (prinl Un "\n" Pw)
  T
)


(de process_req (Verb Path Qs Post User)
  (default Path (confv '(default_path)))
  (setq Thing (car Path) Ns (intern (confv '(ns))))
  (or 
    (and 
      (setq Fn (car Path))
      (match (append '(@foo) '(.) '(@ext)) (chop Fn))
      (if  (member (pack @ext) '(html htmx css js png gif))
        (if ( info (pack (confv '(static_dir)) Fn)) 
          (respond 200 (in (pack (confv '(static_dir)) Fn ) (till)))
          (respond 404))
        (respond 403)))
    (respond 200 (let (Cls (or (isa '+Rest (intern (to_cls_nm Thing) Ns)) (intern (to_cls_nm (singularize Thing) Ns )))) (send (any (pack Verb ">")) Cls Path Qs Post User)) )
    (respond 404)))


(pool (confv '(pool)))

(setq +Password +String)

(class +Rest) 
  (dm owner_rel ()
    'uid)

  (dm owner_at_creation> ()
    (or (: owner_at_creation) current_user))

  (dm perms> () 744)
  
  (dm rels> (Cls) 
    (setq Rels (delete NIL (append (try 'rels> (car (type This))) (filter '((r) (<> (cdr r) '*Dbg)) (getl This)))))
    (if (> Cls Nil)
      (filter '((r) (= Cls (sect Cls (type (car r))))) Rels)
      Rels))

  (dm get> (Path Qs Post User) 
    (case (cadr Path)
      ("new" (reggae))
      ((NIL "list") )
      ("search") 
    ))

  (dm post> () prinl 'post)
  (dm put> () prinl 'put)
  (dm delete> () prinl 'del)


(when *Dbg

)
